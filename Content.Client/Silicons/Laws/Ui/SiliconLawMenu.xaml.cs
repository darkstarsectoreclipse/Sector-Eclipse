using Content.Client.UserInterface.Controls;
using Content.Shared.Silicons.Laws;
using Content.Shared.Silicons.Laws.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Toolshed.Commands.Math;

namespace Content.Client.Silicons.Laws.Ui;

[GenerateTypedNameReferences]
public sealed partial class SiliconLawMenu : FancyWindow
{
    public SiliconLawMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void Update(EntityUid uid, SiliconLawBuiState state)
    {
        ButtonGroup lawsetButtons = new ButtonGroup(false);

        LawsetDisplayContainer.Children.Clear();
        var lawsetButton = new Button
        {
            Text = "Current Lawset",
            MinHeight = 35,
            MinWidth = 75,
        };
        lawsetButton.Group = lawsetButtons;
        lawsetButton.OnPressed += (_) => DisplayLawset(0, uid, state);
        LawsetDisplayContainer.AddChild(lawsetButton);

        for (int i = 0; i < state.StandardLawsets.Count; i++)
        {
            lawsetButton = new Button
            {
                Text = state.StandardLawsets[i].Name,
                MinHeight = 35,
                MinWidth = 75,
                ToggleMode = true
            };
            int index = i;
            lawsetButton.Group = lawsetButtons;
            lawsetButton.OnPressed += (_) => DisplayLawset(index + 1, uid, state);
            LawsetDisplayContainer.AddChild(lawsetButton);
        }

        DisplayLawset(0, uid, state);
    }

    private void DisplayLawset(int i, EntityUid uid, SiliconLawBuiState state)
    {
        var laws = (i == 0) ? state.Laws : state.StandardLawsets[i - 1].Laws;
        laws.Sort();
        LawDisplayContainer.Children.Clear();
        foreach (var law in laws)
        {
            var control = new LawDisplay(uid, law, state.RadioChannels);
            LawDisplayContainer.AddChild(control);
        }
    }
}
