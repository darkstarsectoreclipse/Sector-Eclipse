using Content.Client.UserInterface.Controls;
using Robust.Client.AutoGenerated;
using Content.Shared._Eclipse.Delusions;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._Eclipse.Delusions.Eui;

[GenerateTypedNameReferences]
public sealed partial class DelusionUi : FancyWindow
{
    public event Action? OnSave;

    private List<Delusion> _delusions = new();

    public DelusionUi()
    {
        RobustXamlLoader.Load(this);
        NewDelusionButton.OnPressed += _ => AddNewDelusion();
        SaveButton.OnPressed += _ => OnSave?.Invoke();
    }

    private void AddNewDelusion()
    {
        DelusionContainer.AddChild(new DelusionContainer());
    }

    public List<Delusion> GetDelusions()
    {
        var newDelusions = new List<Delusion>();

        foreach (var control in DelusionContainer.Children)
        {
            if (control is not DelusionContainer delusioncontrol)
                continue;

            var title = delusioncontrol.Title;
            if (string.IsNullOrWhiteSpace(title))
                continue;

            var text = delusioncontrol.Text;
            if (string.IsNullOrWhiteSpace(text))
                continue;

            var delusion = new Delusion()
            {
                Name = title,
                Description = text,
            };

            newDelusions.Add(delusion);
        }

        return newDelusions;
    }

    private void Delete(int index)
    {
        _delusions.RemoveAt(index);
        SetDelusions(_delusions);
    }

    public void SetDelusions(List<Delusion> delusions)
    {
        _delusions = delusions;
        this.DelusionContainer.RemoveAllChildren();
        for (var i = 0; i < delusions.Count; i++)
        {
            var index = i;
            var delusionControl = new DelusionContainer(delusions[i]);
            delusionControl.OnDelete += () => Delete(index);
            this.DelusionContainer.AddChild(delusionControl);
        }
    }
}
